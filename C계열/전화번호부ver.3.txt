
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define INIT_CAPACITY 3 // 배열 재할당을 테스트하기 위해서 일부러 아주 작은 값으로
#define CAPACITY 100
#define BUFFER_SIZE 50

// 포인터타입은 넣는 문자열의 시작주소를 저장함.
// 그래서 그 시작주소로 가보면 내가 넣은 문자열이 있음.
// char* 타입의 배열의 이름이므로 char** 타입의 변수이다.
char** names;
char** numbers;

int capacity = INIT_CAPACITY; // size of arrays
int n = 0; // number of people in phone directory

void add(char*, char*);
void find(char*);
void status();
void remove(char*);
void load(char*);
void save();
int read_line(char *, int);
void init_directory();
void process_command();
void reallocate();

char delim[] = " ";

int main()
{
	init_directory(); // 이 함수에서 배열 names와 numbers를 생성한다.
	process_command(); // 사용자의 명령을 받아 처리하는 부분을 별개의 함수로 만들었다.

	char command[BUFFER_SIZE];
	while (1)
	{
		printf("$ ");
		scanf("%s", command);

		if (strcmp(command, "add") == 0)
			add();
		else if (strcmp(command, "find") == 0)
			find();
		else if (strcmp(command, "status") == 0)
			status();
		else if (strcmp(command, "delete") == 0)
			remove();
		else if (strcmp(command, "read") == 0)
			load();
		else if (strcmp(command, "save") == 0)
			save();
		else if (strcmp(command, "exit") == 0)
			break;
	}

	return 0;
}

int read_line(char str[], int limit)
{
	int ch, i = 0;

	// while(i < limit - 1 && (ch = getchar()) != '\n') 이거랑 다른거임
	while ((ch = getchar()) != '\n')
		if (i < limit - 1)
			str[i++] = ch;

	str[i] = '\0';

	return i;
}

void init_directory()
{
	// 할당할 메모리의 byte수를 지정한다.
	// 직접 숫자로 지정하는 것 보다 이렇게 sizeof연산자를 사용하는것이 바람직함.
	names = (char**)malloc(INIT_CAPACITY * sizeof(char*));
	numbers = (char**)malloc(INIT_CAPACITY * sizeof(char*));
}

void process_command()
{
	char command_line[BUFFER_SIZE]; // 한 라인을 통채로 읽어오기 위한 버퍼
	char* command, * argument1, * argument2;

	while (1)
	{
		printf("$ ");

		// 명령줄을 통채로 읽는다.
		if (read_line(command_line, BUFFER_SIZE) <= 0)
			continue;

		// 첫 번째 토큰은 명령어이다.
		command = strtok(command_line, delim);
		if (command == NULL) continue;

		if (strcmp(command, "read") == 0)
		{
			// read 명령에서 두번째 토큰은 파일명이다.
			argument1 = strtok(NULL, delim);

			if (argument1 == NULL)
			{
				printf("File name required.\n");
				continue;
			}

			// 파일명을 인자로 주면서 load를 호출한다.
			load(argument1);
		}

		else if (strcmp(command, "add") == 0)
		{
			// 명령어에 이어지는 2개의 토큰은 각각 이름과 전화번호이다.
			argument1 = strtok(NULL, delim);
			argument2 = strtok(NULL, delim);

			if (argument1 == NULL || argument2 == NULL)
			{
				printf("Invalid arguments.\n");
				continue;
			}

			add(argument1, argument2);

			printf("%s was successfully.\n", argument1);
		}

		else if (strcmp(command, "find") == 0)
		{
			argument1 = strtok(NULL, delim);

			if (argument1 = NULL)
			{
				printf("Invalid arguments.\n");
				continue;
			}

			find(argument1);
		}

		else if (strcmp(command, "status") == 0)
			status();

		else if (strcmp(command, "delete") == 0)
		{
			argument1 = strtok(NULL, delim);

			if (argument1 == NULL)
			{
				printf("Invalid arguments.\n");
				continue;
			}

			remove(argument1);
		}
	}
}

int search(char* name)
{
	int i;
	for (i = 0; i < n; i++)
	{
		if (strcmp(name, names[i]) == 0)
			return i;

		return -1;
	}
}

// 사전식 순서로 자신보다 큰 항목들은 모두 한 칸씩 뒤로 이동시키고,
// 처음으로 자신보다 작은 항목이 나오면 그것 바로 뒤에 삽입한다.
void add(char* name, char* number)
{
	// 배열이 꽉찬 경우 재할당한다.
	if (n >= capacity)
		reallocate();

	int i = n - 1;
	while (i >= 0 && strcmp(names[i], name) > 0)
	{
		names[i + 1] = names[i];
		numbers[i + 1] = numbers[i];
		i--;
	}

	// strdup가 반드시 필요한 이유?
	// -> 전역변수에 저장해놔야함
	names[i + 1] = strdup(name);
	numbers[i + 1] = strdup(number);

	n++;
}

void reallocate()
{
	int i;

	// 먼저 크기가 2인 배열들을 할당한다.
	capacity *= 2;
	char** tmp1 = (char**)malloc(capacity * sizeof(char*));
	char** tmp2 = (char**)malloc(capacity * sizeof(char*));

	// 원본 배열 names와 numbers의 값을 새로운 배열에 모두 복사한다.
	for (i = 0; i < n; i++)
	{
		tmp1[i] = names[i];
		tmp2[i] = numbers[i];
	}

	// 원본 배열 names와 numbers는 더이상 필요없다.
	// 하지만 두 배열은 init_directory() 함수에서 동적메모리할당으로
	// 만들어진 배열이므로 그냥 두면 없어지지 않고 계속 존재한다.
	// 이런 메모리를 garbage라고 부른다.
	// garbage는 free함수를 이용하여 반환한다.
	free(names);
	free(numbers);

	// names와 numbers가 새로운 배열을 가리키도록 한다.
	// 배열의 이름은 포인터 변수이다.
	names = tmp1;
	numbers = tmp2;
}

void find(char* name)
{
	int index = search(name);
	if (index == -1)
		printf("No person named '%s' exists.\n", name);
	else
		printf("%s\n", numbers[index]);
}

void status()
{
	int i;
	for (i = 0; i < n; i++)
	{
		printf("%s %s\n", names[i], numbers[i]);
	}

	printf("Total %d persons.\n", n);
}

void remove(char* name)
{
	// index는 비어있는부분.
	int i = search(name); // returns -1 if not exists
	if (i == -1)
	{
		printf("No person named '%s' exists.\n", name);
		return;
	}

	int j = i;
	for (; j < n - 1; j++)
	{
		names[j] = names[j + 1];
		numbers[j] = numbers[j + 1];
	}

	n--;
	printf("No person named '%s' exists.\n", name);
}

void load(char *fileName)
{
	char buf1[BUFFER_SIZE];
	char buf2[BUFFER_SIZE];

	FILE* fp = fopen(fileName, "r");
	if (fp == NULL)
	{
		printf("Open failed.\n");
		return;
	}

	while (fscanf(fp, "%s", buf1) != EOF)
	{
		fscanf(fp, "%s", buf2);
		add(buf1, buf2);
	}

	fclose(fp);
}

void save()
{
	int i;
	char fileName[BUFFER_SIZE];
	char tmp[BUFFER_SIZE];

	scanf("%s", tmp); // which is "as", discarded
	scanf("%s", fileName);

	FILE* fp = fopen(fileName, "w");
	if (fp == NULL)
	{
		printf("Open failed.\n");
		return;
	}

	for (i = 0; i < n; i++)
	{
		fprintf(fp, "%s %s\n", names[i], numbers[i]);
	}

	fclose(fp);
}