
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define INIT_CAPACITY 3 // 배열 재할당을 테스트하기 위해서 일부러 아주 작은 값으로
#define CAPACITY 100
#define BUFFER_SIZE 100

// 항상 같이 붙어다녀야 하는 데이터를 별개의 변수들에 분산해서 저장하는것은 바람직하지 않다.
// 어떤 한 사람의 이름, 전화번호, 이메일 주소 등이 그런 예이다.
// C언어에서는 이런 경우 구조체를 사용한다.
// structure tag인 person을 생략해도 된다.
typedef struct
{
	char* name;
	char* number;
	char* email;
	char* group;
}PERSON;

// 포인터타입은 넣는 문자열의 시작주소를 저장함.
// 그래서 그 시작주소로 가보면 내가 넣은 문자열이 있음.
// char* 타입의 배열의 이름이므로 char** 타입의 변수이다.
char** names;
char** numbers;
PERSON directory[CAPACITY];
int capacity = INIT_CAPACITY; // size of arrays
int n = 0; // number of people in phone directory

void add(char* name, char* number, char* email, char* group);
void find(char*);
void status();
void remove(char*);
void load(char*);
void save(char* fileName);
int read_line(FILE* fp, char str[], int n);
void init_directory();
void process_command();
void reallocate();
int compose_name(char str[], int limit);

int main()
{
	init_directory(); // 이 함수에서 배열 names와 numbers를 생성한다.
	process_command(); // 사용자의 명령을 받아 처리하는 부분을 별개의 함수로 만들었다.

	return 0;
}

// read_line을 수정하여 키보드뿐만이 아니라 파일로부터도 읽을 수 있도록 하였다.
// 키보드의 파일포인터는 stdin.
int read_line(FILE* fp, char str[], int n)
{
	int ch, i = 0;

	// getchar 파일버전이 fgetc
	// 파일로부터 읽어야하므로 ch != EOF추가
	while ((ch = fgetc(fp)) != '\n' && ch != EOF)
	{
		if (i < n)
			str[i++] = ch;
	}

	str[i] = '\0';
	return i;
}

void init_directory()
{
	// 할당할 메모리의 byte수를 지정한다.
	// 직접 숫자로 지정하는 것 보다 이렇게 sizeof연산자를 사용하는것이 바람직함.
	names = (char**)malloc(INIT_CAPACITY * sizeof(char*));
	numbers = (char**)malloc(INIT_CAPACITY * sizeof(char*));
}

// command_line의 남아있는 토큰들을 모두 합쳐 이름을 나타내는 문자열을 구성한다.
// 토큰과 토큰 사이에 하나의 공백문자를 삽입한다.
int compose_name(char str[], int limit)
{
	char* ptr;
	int length = 0;

	ptr = strtok(NULL, " ");
	if (ptr == NULL)
		return 0;

	strcpy(str, ptr);
	length += strlen(ptr);

	while ((ptr = strtok(NULL, " ")) != NULL)
	{
		if (length + strlen(ptr) + 1 < limit)
		{
			str[length++] = ' ';
			str[length] = '\0';
			strcat(str, ptr);
			length += strlen(ptr);
		}
	}

	return length;
}

void handle_add(char* name)
{
	char number[BUFFER_SIZE], email[BUFFER_SIZE], group[BUFFER_SIZE];
	char empty[] = " ";

	printf(" Phone : ");
	read_line(stdin, number, BUFFER_SIZE);

	printf(" Email : ");
	read_line(stdin, email, BUFFER_SIZE);

	printf(" Group : ");
	read_line(stdin, group, BUFFER_SIZE);

	// 실제로 이런식으로 많이씀
	add(name, (char*)(strlen(number) > 0 ? number : empty),
		(char*)(strlen(email) > 0 ? email : empty),
		(char*)(strlen(group) > 0 ? group : empty));
}

void process_command()
{
	char command_line[BUFFER_SIZE]; // 한 라인을 통채로 읽어오기 위한 버퍼
	char* command, *argument;
	char name_str[BUFFER_SIZE];

	while (1)
	{
		printf("$ ");

		// 명령줄을 통채로 읽는다.
		if (read_line(stdin, command_line, BUFFER_SIZE) <= 0)
			continue;

		// 첫 번째 토큰은 명령어이다.
		command = strtok(command_line, " ");
		if (command == NULL) continue;

		if (strcmp(command, "read") == 0)
		{
			// read 명령에서 두번째 토큰은 파일명이다.
			argument = strtok(NULL, " ");

			if (argument == NULL)
			{
				printf("Invalid arguments.\n");
				continue;
			}

			// 파일명을 인자로 주면서 load를 호출한다.
			load(argument);
		}

		else if (strcmp(command, "add") == 0)
		{
			// compose_name은 나머지 토큰들을 merge하여 이름을 구성한다.
			if (compose_name(name_str, BUFFER_SIZE) <= 0)
			{
				printf("Name required.\n");
				continue;
			}

			handle_add(name_str);
		}

		else if (strcmp(command, "find") == 0)
		{
			if (compose_name(name_str, BUFFER_SIZE) <= 0)
			{
				printf("Name required.\n");
				continue;
			}

			find(name_str);
		}

		else if (strcmp(command, "status") == 0)
			status();

		else if (strcmp(command, "delete") == 0)
		{
			if (compose_name(name_str, BUFFER_SIZE) <= 0)
			{
				printf("Invalid arguments.\n");
				continue;
			}

			remove(name_str);
		}

		else if (strcmp(command, "save") == 0)
		{
			argument = strtok(NULL, " ");

			if (strcmp(argument, "as") != 0)
			{
				printf("Invalid arguments.\n");
				continue;
			}

			argument = strtok(NULL, " ");

			if (argument == NULL)
			{
				printf("Invalid arguments.\n");
				continue;
			}

			save(argument);
		}

		else if (strcmp(command, "exit") == 0)
			break;
	}
}

int search(char* name)
{
	int i;
	for (i = 0; i < n; i++)
	{
		if (strcmp(name, names[i]) == 0)
			return i;

	}

	return -1;
}

// 사전식 순서로 자신보다 큰 항목들은 모두 한 칸씩 뒤로 이동시키고,
// 처음으로 자신보다 작은 항목이 나오면 그것 바로 뒤에 삽입한다.
void add(char* name, char* number, char* email, char* group)
{
	int i = n - 1;
	while (i >= 0 && strcmp(directory[i].name, name) > 0)
	{
		directory[i + 1] = directory[i];
		i--;
	}

	// 없는 경우에는 하나의 공백문자로 저장된다.
	directory[i + 1].name = strdup(name);
	directory[i + 1].number = strdup(number);
	directory[i + 1].email = strdup(email);
	directory[i + 1].group = strdup(group);

	n++;
}

// 배열의 크기를 키우는 방법은 없음.
// 그래서 기존 배열 버리고 새로운배열을 생성하는 방법으로 함.
void reallocate()
{
	int i;

	// 먼저 크기가 2인 배열들을 할당한다.
	capacity *= 2;
	char** tmp1 = (char**)malloc(capacity * sizeof(char*));
	char** tmp2 = (char**)malloc(capacity * sizeof(char*));

	// 원본 배열 names와 numbers의 값을 새로운 배열에 모두 복사한다.
	for (i = 0; i < n; i++)
	{
		tmp1[i] = names[i];
		tmp2[i] = numbers[i];
	}

	// 원본 배열 names와 numbers는 더이상 필요없다.
	// 하지만 두 배열은 init_directory() 함수에서 동적메모리할당으로
	// 만들어진 배열이므로 그냥 두면 없어지지 않고 계속 존재한다.
	// 이런 메모리를 garbage라고 부른다.
	// garbage는 free함수를 이용하여 반환한다.
	free(names);
	free(numbers);

	// names와 numbers가 새로운 배열을 가리키도록 한다.
	// 배열의 이름은 포인터 변수이다.
	names = tmp1;
	numbers = tmp2;
}

void find(char* name)
{
	int index = search(name);
	if (index == -1)
		printf("No person named '%s' exists.\n", name);
	else
		print_person(directory[index]);
}

void print_person(PERSON p)
{
	printf("%s:\n", p.name);
	printf(" Phone : %s\n", p.number);
	printf(" Email : %s\n", p.email);
	printf(" Group : %s\n", p.group);
}

void status()
{
	int i;
	for (i = 0; i < n; i++)
	{
		print_person(directory[i]);
	}

	printf("Total %d persons.\n", n);
}

void remove(char* name)
{
	// index는 비어있는부분.
	int i = search(name); // returns -1 if not exists
	if (i == -1)
	{
		printf("No person named '%s' exists.\n", name);
		return;
	}

	int j = i;
	for (; j < n - 1; j++)
	{
		// 구조체 변수간의 치환연산이 지원되므로
		// 멤버 항목들을 따로따로 치환할 필요가 없다.
		directory[j] = directory[j + 1];
	}

	n--;
	printf("'%s' was deleted successfully. \n", name);
}

void load(char *fileName)
{
	char buffer[BUFFER_SIZE];
	char* name, *number, *email, *group;

	FILE *fp = fopen(fileName, "r");

	if (fp == NULL)
	{
		printf("Open failed.\n");
		return;
	}

	while (1)
	{
		if (read_line(fp, buffer, BUFFER_SIZE) <= 0)
			break;

		name = strtok(buffer, "#");
		number = strtok(NULL, "#");
		email = strtok(NULL, "#");
		group = strtok(NULL, "#");
		add(name, number, email, group);
	}
}

void save(char* fileName)
{
	int i;
	FILE* fp = fopen(fileName, "w");
	if (fp == NULL)
	{
		printf("Open failed.\n");
		return;
	}

	for (i = 0; i < n; i++)
	{
		fprintf(fp, "%s#", directory[i].name);
		fprintf(fp, "%s#", directory[i].number);
		fprintf(fp, "%s#", directory[i].email);
		fprintf(fp, "%s#\n", directory[i].group);
	}

	fclose(fp);
}