
/*
head hello part one is head hello hello
and board is cool EOF
*/

#pragma warning (disable : 4996)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAXLEN 100

// 하나의 단어와 그 단어의 빈도수를 저장하기 위한 구조체
typedef struct
{
	char* word;
	int freq;
}ITEM;

// 연결리스트의 노드의 구조를 정의하는 구조체
typedef struct node
{
	ITEM* data;
	struct node* next;
}NODE;

NODE* Insert(NODE*, char buf[]);

int main()
{
	char buf[MAXLEN];
	NODE* head = NULL; // head는 지역변수이다.

	while (1)
	{
		scanf("%s", buf);
		if (strcmp(buf, "EOF") == 0)
			break;

		head = Insert(head, buf);
	}

	NODE* p = head;
	while (p != NULL)
	{
		printf("%s:%d\n", p->data->word, p->data->freq);
		p = p->next;
	}

	// 메모리해제
	while (head != NULL)
	{
		p = head->next;
		free(head);
		head = p;
	}

	return 0;
}


// 입력된 문자열을 연결리스트에 반영하고 head노드의 주소를 반환한다.
// 이미 존재하는 문자열이면 카운트만 증가하고, 
// 아니라면 정렬된 순서로 연결리스트에 추가한다.
NODE* Insert(NODE* head, char buf[])
{
	bool isEqual = false;

	NODE* tmp = (NODE*)malloc(sizeof(NODE));
	tmp->data = (ITEM*)malloc(sizeof(ITEM));
	tmp->data->word = strdup(buf);
	tmp->data->freq = 1;
	tmp->next = NULL;

	// 첫노드
	if (head == NULL)
	{
		return tmp;
	}

	// 첫번째 같을경우
	if (strcmp(buf, head->data->word) == 0)
	{
		head->data->freq++;
		return head;
	}

	// 맨앞에 작은게 나올경우
	if (strcmp(buf, head->data->word) < 0)
	{
		tmp->data->word = strdup(buf);
		tmp->data->freq = 1;
		tmp->next = head;
		return tmp;
	}

	// 클 경우
	NODE* p = head;
	NODE* prev = NULL;

	while (p != NULL)
	{
		if (strcmp(buf, p->data->word) == 0)
		{
			isEqual = true;
			break;
		}

		if (strcmp(buf, p->data->word) < 0)
		{
			isEqual = false;
			break;
		}

		prev = p;
		p = p->next;
	}

	if (isEqual == false)
	{
		tmp->data->word = strdup(buf);
		tmp->data->freq = 1;
		tmp->next = prev->next;
		prev->next = tmp;
		return head;
	}

	else
	{
		p->data->freq++;
		return head;
	}

	// ==========================================

	NODE* p = head, *q = NULL;
	while (p != NULL && strcmp(p->data->word, buf) < 0)
	{
		q = p;
		p = p->next;
	}

	// p가 NULL일 가능성을 항상 따져준다.
	if (p != NULL && strcmp(p->data->word, buf) == 0)
	{
		p->data->freq++;
		return head;
	}

	// 또다른 함수를 하나 만들어서 하는게 좋을듯.
	// 코드가 반복될 가능성
	NODE* t = (NODE*)malloc(sizeof(NODE));
	t->data = (ITEM*)malloc(sizeof(ITEM));
	t->data->word = strdup(buf);
	t->data->freq = 1;
	t->next = NULL; // 이건 일단 해주는게 중요

	// 맨앞의 노드이면
	if (q == NULL)
	{
		t->next = head;
		return t;
	}

	// 맨뒤의 노드이면
	t->next = p;
	q->next = t;
	return head;
}

NODE* CreateNode(char* buf)
{
	NODE* t = (NODE*)malloc(sizeof(NODE));
	t->data = (ITEM*)malloc(sizeof(ITEM));
	t->data->word = strdup(buf);
	t->data->freq = 1;
	t->next = NULL; // 이건 일단 해주는게 중요
	return t;
}