
#include <iostream>
#include <functional> // c++11 functional기능

using namespace std;

/*
함수의 메모리 주소를 저장하기 위한 포인터 변수를 선언할 수 있다.
전역함수의 경우 함수명이 곧 함수의 메모리 주소이다.(배열이랑 비슷함)
함수포인터 선언방법 : 반환타입 (*포인터변수명)(인자타입);의 형태로 구성이된다.

함수포인터 많이쓰지는않음
*/

int Sum(int a, int b)
{
	return a + b;
}

int OutSum(int a, int b)
{
	cout << a - b << endl;
	return a - b;
}

void Output()
{
	cout << "Output Function" << endl;
}

float TestFunc(float a)
{
	cout << a << endl;
	return a;
}

class CHanzo
{
public:
	CHanzo()
	{
		m_iTest = 10;
	}

	~CHanzo()
	{

	}

public:
	int m_iTest;

public:
	void Output()
	{
		cout << "Hanzo" << endl;
		// this->는 생략할 수 있다.
		cout << "Test : " << this->m_iTest << endl;
	}
};

int main()
{
	int(*pFunc)(int, int) = Sum;

	cout << pFunc(10, 20) << endl;

	// 가리키는걸 바꿔줄수있음
	pFunc = OutSum;

	OutSum(10, 20);
	pFunc(10, 20);

	// 타입달라서 안됨
	//pFunc = Output;

	void(*pFunc1)() = Output;

	pFunc1();

	CHanzo hanzo1, hanzo2;

	hanzo1.m_iTest = 100;
	hanzo2.m_iTest = 200;

	// 멤버함수의 포인터는 하나인데 두개이상 인식하는이유? -> this포인터땜에
	// this 포인터 : 클래스 안에서 this를 사용할 경우 해당 객체의 메모리
	// 주소가 된다. 즉 자기자신의 포인터이다.
	// 멤버함수를 호출할때 this를 호출자로 세팅한다.
	hanzo1.Output(); // this가 hanzo1의 메모리주소
	hanzo2.Output(); // this가 hanzo2의 메모리주소

	// 멤버함수포인터 선언시 포인터변수 이름 앞에 클래스명:: 을 붙여준다.
	// :: (범위지정 연산자)(스코프연산자)

	// 객체? 클래스를 이용해서 생성한 변수
	// 클래스? 객체를 찍어내기위한 틀
	// 멤버함수 포인터에서는 함수명이 포인터가 아님. 그래서 주소를 붙여줘야함
	void(CHanzo::*pFunc2)() = &CHanzo::Output;

	//(*pFunc2)();
	//hanzo1.(*pFunc2)();

	// 멤버함수는 호출하는게 까다로움 이런식으로 해야함
	(hanzo1.*pFunc2)();

	/*
	function 기능은 C++11 부터 지원을 해주는 기능이다. 이 기능은 함수포인터를
	전역, 멤버 가리지 않고 쉽게 주소를 저장해서 호출해줄 수 있도록 만들어주는 기능임.
	선언방법 : function<반환타입(인자타입)> 변수명;의 형태로 선언한다.
	*/
	// 전역함수이던 멤버함수이던 다 넣을수 있음
	function<void()> func;
	function<void()> func1;

	// bind를 이용해서 함수를 묶어준다.
	func = bind(Output); // 전역함수
	func1 = bind(&CHanzo::Output, &hanzo2); // 멤버함수

	cout << "============= Functional ===========" << endl;
	func();
	func1();

	function<int(int, int)> func3;
	function<float(float)> func4;

	// 함수에 인자가 있을 경우 placeholders를 이용해서 인자의 순서를 정의할 수 있음.
	// 아래처럼 2, 1로 넣어주면 인자가 서로 바뀌게 된다.
	func3 = bind(OutSum, placeholders::_2, placeholders::_1);

	// 위에서 2, 1로 바꿔줬으므로 10은 b에 20은 a에 들어가게 된다.
	func3(10, 20);

	func4 = bind(TestFunc, placeholders::_1);

	func4(3.14f);

	return 0;
}