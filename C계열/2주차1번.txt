
// 양쪽을 잘라만 놓고 판별하는 함수로 들어가자.
// 문자 3개 연속된 경우도있으니 2이상으로 코딩해야함.
// 카운트를하자.

#pragma warning (disable : 4996)

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define BUFFER_SIZE 50
#define WORD_SIZE 900

int num = 0;
char* words[WORD_SIZE];
int countArr[WORD_SIZE] = { 0 };

void Input();
void CutBothSide(char* str);
void Output();
void Sort();
int CatchDup(char* str);
void Delim(char* str);

int main()
{
	Input();
	Sort();
	Output();

	return 0;
}

void Input()
{
	char buffer[BUFFER_SIZE];

	FILE* fp = fopen("pride_and_prejudice.txt", "r");

	if (fp == NULL)
	{
		printf("Open failed.\n");
		return;
	}

	while (fscanf(fp, "%s", buffer) != EOF)
	{
		CutBothSide(buffer);
		Delim(buffer);
	}

	fclose(fp);
}

// 중복되면 해당되는 인덱스리턴
// 중복 아니면 -1리턴
int CatchDup(char* str)
{
	for (int i = 0; i < num; i++)
	{
		if (strcmp(str, words[i]) == 0)
			return i;
	}

	return -1;
}

void Delim(char* str)
{
	int tmpNum = 0, tmpNumSecond = 0;
	char tmp[BUFFER_SIZE];
	char tmpSecond[BUFFER_SIZE];

	bool isDouble = false;

	int length = strlen(str);

	for (int i = 0; i < length; i++)
	{
		// 두개이상의 특수문자가 연속되었다.
		// 두개 이상 안되는줄 알았는데 예를들어 half-an--!was라는
		// 단어가 있다고 하자. isDouble이 되는경우는 -!w 이고 str[i]는 w이다.
		// 그럼 그 이후로는 그냥 계속 isDouble이 true여서 tmpSecond에 저장된다.
		// 대신 half-a--!was---a 와 같이 그 뒤에 또다시 두개이상의 연속된 특수문자가
		// 나오는 경우는 필터링 못함
		if (i > 1 && isalpha(str[i - 2]) == 0
			&& isalpha(str[i - 1]) == 0 && isalpha(str[i]) != 0)
		{
			isDouble = true;
		}

		// bennet's와 같이 가운데 특수문자가 한개만 오는 경우와
		// 그냥 일반 영문자가 오는경우에는 tmp에 저장한다.
		if ((i > 0 && i < length - 1 &&
			isalpha(str[i - 1]) != 0 &&
			isalpha(str[i]) == 0 &&
			isalpha(str[i + 1]) != 0) ||
			(isalpha(str[i]) != 0 &&
				isDouble == false))
		{
			tmp[tmpNum] = tolower(str[i]);
			tmpNum++;
		}

		// 잘린 이후의 문자 저장.
		if (isDouble == true && isalpha(str[i]) != 0)
		{
			tmpSecond[tmpNumSecond] = tolower(str[i]);
			tmpNumSecond++;
		}
	}

	tmp[tmpNum] = '\0';
	tmpSecond[tmpNumSecond] = '\0';

	if (strlen(tmp) >= 7)
	{
		int index = CatchDup(tmp);

		// 중복 아니면 단어와 카운트를 증가시킨다.
		if (index == -1)
		{
			words[num] = strdup(tmp);
			countArr[num]++;
			num++;
		}

		// 중복이면 카운트만 증가시킨다.
		else if (index >= 0)
		{
			countArr[index]++;
		}
	}

	if (strlen(tmpSecond) >= 7)
	{
		int index = CatchDup(tmpSecond);

		// 중복 아니면 단어와 카운트를 증가시킨다.
		if (index == -1)
		{
			words[num] = strdup(tmpSecond);
			countArr[num]++;
			num++;
		}

		// 중복이면 카운트만 증가시킨다.
		else if (index >= 0)
		{
			countArr[index]++;
		}
	}
}

void CutBothSide(char* str)
{
	int len = strlen(str);
	int s = 0, t = len - 1;

	while (s < len && !isalpha(str[s]))
		s++;

	while (t >= 0 && !isalpha(str[t]))
		t--;

	if (s > t)
		return;

	int k = 0;

	for (int i = s; i <= t; i++)
		str[k++] = tolower(str[i]);

	str[t - s + 1] = '\0';
}

void Output()
{
	for (int i = 0; i < num; i += 10)
	{
		printf("%s %d\n", words[i], countArr[i]);
	}
}

void Sort()
{
	char* tmp;
	int intTmp;

	for (int i = num - 1; i >= 0; i--)
	{
		for (int j = 0; j < i; j++)
		{
			if (strcmp(words[j], words[i]) > 0)
			{
				tmp = words[i];
				words[i] = words[j];
				words[j] = tmp;

				intTmp = countArr[i];
				countArr[i] = countArr[j];
				countArr[j] = intTmp;
			}
		}
	}
}