
// create Feb July January Nov April Dec

#pragma warning (disable : 4996)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct node
{
	char* data;
	struct node* next;
}NODE;

NODE* head = NULL;

void Input();
void Create();
void Print(); 
void Rotate();
void Remove();

int main()
{
	Input();
	
	return 0;
}

void Input()
{
	char command[10];

	while (1)
	{
		printf("$\n");

		scanf("%s", command);

		if (strcmp(command, "exit") == 0) break;
		else if (strcmp(command, "create") == 0) Create();
		else if (strcmp(command, "print") == 0) Print();
		else if (strcmp(command, "rotate") == 0) Rotate();
		else if (strcmp(command, "remove") == 0) Remove();
	}

}

void Create()
{
	char buffer[100];
	char* token;

	fgets(buffer, 100, stdin);
	buffer[strlen(buffer) - 1] = '\0';

	token = strtok(buffer, " ");

	NODE* tmp = (NODE*)malloc(sizeof(NODE));
	tmp->data = strdup(token);
	tmp->next = head;
	head = tmp;

	while (1)
	{
		token = strtok(NULL, " ");

		if (token == NULL)
			break;

		NODE* p = head;
		NODE* q = NULL;
		while (p != NULL)
		{
			q = p;
			p = p->next;
		}

		// 맨 뒤
		NODE* tmp = (NODE*)malloc(sizeof(NODE)); // 노드 생성 해줘야함
		tmp->data = strdup(token);
		tmp->next = p;
		q->next = tmp;
	}
}

void Print()
{
	NODE* p = head;
	while (p != NULL)
	{
		printf("%s ", p->data);
		p = p->next;
	}
}

// circular left shift
void Rotate()
{
	int k;
	scanf("%d", &k);
	for (int i = 0; i < k; i++)
	{
		if (head == NULL || head->next == NULL)
			return;

		NODE* p = head;
		NODE* q = NULL;

		while (p != NULL)
		{
			q = p;
			p = p->next;
		}

		p = head;
		q->next = p;
		head = head->next;
		p->next = NULL;
		
	}
}

void Remove()
{
	char buffer[10];
	scanf("%s", buffer);
	scanf("%s", buffer);

	NODE* p = head;
	NODE* q = NULL;
	while (p != NULL)
	{
		if (strcmp(p->data, buffer) >= 0)
		{
			// 맨 앞
			if (q == NULL)
			{
				NODE* tmp = head;
				head = head->next;
				p = p->next;
				free(tmp);
				continue;
			}

			// 맨 뒤
			NODE* tmp = p;
			q->next = p->next;
			p = p->next;
			free(tmp);
			continue;
		}

		q = p;
		p = p->next;
	}
}